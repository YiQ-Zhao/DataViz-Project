wiki_edge[1:5,]
wiki_adjacency[30, 1412]
wiki_adjacency[30, 7478]
object.size(get('wiki_adjacency'))
550721872/1000
550721872/1000/1000
rm(wiki_edge)
rm(wiki_adjacency)
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#")
wiki_edge = as.matrix(wiki)
head(wiki)
library(tidyverse)
1+1
GGM.graph = graph.adjacency(huge.opt1$refit, mode='undirected')
iris_corr = cor(t(iris_X))  # correlation between rows
data("iris")
library(igraph)
library(tidyverse)
library(huge)  # Gaussian Graphical model
iris_X = iris[, 1:4]
iris_y = as.numeric(iris$Species)
iris.hg = huge(scale(t(iris_X)))
iris.hg.opt1 <- huge.select(iris.hg, criterion = "ric")
# summary(iris.hg.opt1$refit)
GGM.graph = graph.adjacency(huge.opt1$refit, mode='undirected')
GGM.graph = graph.adjacency(iris.hg.opt1$refit, mode='undirected')
summary(GGM.graph)
iris_corr = cor(t(iris_X))  # correlation between rows
z = 0.5 * log((1+iris_corr)/(1-iris_corr))
n = 4
z.vec = z[upper.tri(z)]
corr.pvals = 2*pnorm(abs(z.vec), 0, sqrt(1/(n-3)), lower.tail = FALSE)
corr.pvals.adjusted = p.adjust(corr.pvals, "BH")
iris_adjacency2 = matrix(0, 150, 150)
iris_adjacency2[upper.tri(iris_adjacency2)] = corr.pvals.adjusted < 0.01
iris_adjacency2 = iris_adjacency2 + t(iris_adjacency2)
iris_adjacency2[1:10, 1:10]
iris_graph2 = graph.adjacency(iris_adjacency2, mode='undirected')
iris_graph2
V(iris_graph2)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
plot(iris_graph2, layout=layout.kamada.kawai)
#Count the total number of edges
ecount(iris_graph2)
#Count the total number of nodes
vcount(iris_graph2)
#Calculate the degree of the yeast network
d.iris2 <- igraph::degree(iris_graph2) #this is the degree sequence
hist(d.iris2,col="blue",
xlab="Degree", ylab="Frequency",
main="Degree Distribution")
summary(iris.hg.opt1$refit)
image(Matrix(iris.hg.opt1$refit))
image(Matrix(iris_adjacency2))
# summary(iris.hg.opt1$refit)
# summary(iris.hg.opt1$refit)
image(Matrix(iris.hg.opt1$refit))
iris_graph1 = graph.adjacency(iris.hg.opt1$refit, mode='undirected')
summary(iris_graph1)
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
plot(iris_graph1, layout=layout.kamada.kawai)
par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
plot(iris_graph1, layout=layout.circle)
title("Iris Flowers: \nCircle Layout")
plot(iris_graph1, layout=layout.fruchterman.reingold)
title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
plot(iris_graph1, layout=layout.circle)
title("Iris Flowers: \nCircle Layout")
plot(iris_graph1, layout=layout.fruchterman.reingold)
title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
plot(iris_graph1, layout=layout.circle)
title("Iris Flowers: \nCircle Layout")
plot(iris_graph1, layout=layout.fruchterman.reingold)
title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
# plot(iris_graph1, layout=layout.circle)
# title("Iris Flowers: \nCircle Layout")
# plot(iris_graph1, layout=layout.fruchterman.reingold)
# title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
# par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
# plot(iris_graph1, layout=layout.circle)
# title("Iris Flowers: \nCircle Layout")
# plot(iris_graph1, layout=layout.fruchterman.reingold)
# title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)[iris$Species == "setosa"]$color <- "red"
V(iris_graph1)[iris$Species == "versicolor"]$color <- "blue"
V(iris_graph1)[iris$Species == "virginica"]$color <- "yellow"
# par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
# plot(iris_graph1, layout=layout.circle)
# title("Iris Flowers: \nCircle Layout")
# plot(iris_graph1, layout=layout.fruchterman.reingold)
# title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)[iris$Species == "setosa"]$color <- "red"
V(iris_graph1)[iris$Species == "versicolor"]$color <- "blue"
V(iris_graph1)[iris$Species == "virginica"]$color <- "yellow"
par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
plot(iris_graph1, layout=layout.circle)
title("Iris Flowers: \nCircle Layout")
plot(iris_graph1, layout=layout.fruchterman.reingold)
title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
par(mfrow=c(1,3))
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
# plot(iris_graph1, layout=layout.circle)
# title("Iris Flowers: \nCircle Layout")
# plot(iris_graph1, layout=layout.fruchterman.reingold)
# title("Iris Flowers: \nFruchterman-Reingold \nLayout")
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
plot(iris_graph1, layout=layout.circle)
title("Iris Flowers: \nCircle Layout")
plot(iris_graph1, layout=layout.fruchterman.reingold)
title("Iris Flowers: \nFruchterman-Reingold \nLayout")
V(iris_graph2)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
plot(iris_graph2, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
V(iris_graph2)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
plot(iris_graph2, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
plot(iris_graph2, layout=layout.circle)
title("Iris Flowers: \nCircle Layout")
plot(iris_graph2, layout=layout.fruchterman.reingold)
title("Iris Flowers: \nFruchterman-Reingold \nLayout")
#Count the total number of edges
ecount(iris_graph1)
#Count the total number of nodes
vcount(iris_graph1)
#Calculate the degree of the yeast network
d.iris1 <- igraph::degree(iris_graph1) #this is the degree sequence
hist(d.iris1,col="blue",
xlab="Degree", ylab="Frequency",
main="Degree Distribution")
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#")
wiki_edge = as.matrix(wiki)
head(wiki)
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#")
wiki_edge = as.matrix(wiki)
head(wiki)
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#")
wiki_edge = as.matrix(wiki)
head(wiki)
iris.hg = huge(scale(t(iris_X)))
iris.hg.opt1 <- huge.select(iris.hg, criterion = "ric")
# summary(iris.hg.opt1$refit)
image(Matrix(iris.hg.opt1$refit))
iris_graph1 = graph.adjacency(iris.hg.opt1$refit, mode='undirected')
summary(iris_graph1)
iris.hg.opt1$refit
iris_graph1 = graph.adjacency(iris.hg.opt1$refit, mode='undirected')
summary(iris_graph1)
V(iris_graph1)$color = c('red','blue','yellow')[iris_y]
igraph.options(vertex.size=3, vertex.label=NA, edge.arrow.size=0.5)
plot(iris_graph1, layout=layout.kamada.kawai)
title("Iris Flowers: \nKamada-Kawai \nLayout")
?graph.edgelist
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
setwd("~/Downloads")
library(igraph, quietly = TRUE)
library(tidyverse)
library(statnet, quietly = TRUE)
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#", col_names = c('FromNodeId', 'ToNodeId'), col_types = 'ii')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
setwd("~/Downloads")
library(igraph, quietly = TRUE)
library(tidyverse)
library(statnet, quietly = TRUE)
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#", col_names = c('FromNodeId', 'ToNodeId'), col_types = 'ii')
head(wiki)
wiki <- as.matrix(wiki) + 1
wiki.obj <- graph.edgelist(wiki)
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#", col_names = c('FromNodeId', 'ToNodeId'), col_types = 'ii')
head(wiki)
wiki <- as.matrix(wiki) + 1
wiki.obj <- graph.edgelist(wiki)
wiki
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#", col_names = c('FromNodeId', 'ToNodeId'), col_types = 'ii')
head(wiki)
wiki <- as.matrix(wiki) + 1
wiki = read_delim('data-wiki-vote/wiki-Vote.txt', delim = "\t", comment="#")
wiki_edge = as.matrix(wiki)
head(wiki)
wiki.obj <- graph.edgelist(wiki)
wiki.obj <- graph.edgelist(wiki_edge)
wiki.obj
wiki.obj <- graph.edgelist(wiki_edge)
vcount(wiki.obj)
ecount(wiki.obj)
is_weighted(wiki.obj)
is_directed(wiki.obj)
wiki.adj <- get.adjacency(wiki.obj, sparse=FALSE)
wiki.sparse <- get.adjacency(wiki.obj, sparse=TRUE)
wiki.el <- get.edgelist(wiki.obj)
object.size(get('wiki_edge'))
wiki.adj <- get.adjacency(wiki.obj, sparse=FALSE)
wiki.sparse <- get.adjacency(wiki.obj, sparse=TRUE)
wiki.el <- get.edgelist(wiki.obj)
wiki.el
class(wiki.el)
wiki_edge
class(wiki_edge)
wiki.adj <- get.adjacency(wiki.obj, sparse=FALSE)
wiki.sparse <- get.adjacency(wiki.obj, sparse=TRUE)
wiki.el <- get.edgelist(wiki.obj)
toString(object.size(wiki.adj))
toString(object.size(wiki.sparse))
toString(object.size(wiki.el))
sub.g1 <- induced.subgraph(wiki.obj, sample(V(wiki.obj), 200))
sub.g2 <- induced.subgraph(wiki.obj, sample(V(wiki.obj), 200))
sub.g3 <- induced.subgraph(wiki.obj, sample(V(wiki.obj), 200))
par(mfrow=c(1,3))
igraph_options(vertex.size=2, edge.arrow.size=0, vertex.label=NA)
plot(sub.g1, layout=layout.circle)
plot(sub.g2, layout=layout.circle)
plot(sub.g3, layout=layout.circle)
title("Circle layout")
plot(sub.g1, layout=layout.kamada.kawai)
plot(sub.g2, layout=layout.kamada.kawai)
plot(sub.g3, layout=layout.kamada.kawai)
title("K.K. layout")
plot(sub.g1, layout=layout.fruchterman.reingold)
plot(sub.g2, layout=layout.fruchterman.reingold)
plot(sub.g3, layout=layout.fruchterman.reingold)
title("F.R. layout")
？get.adjacency()
？get.adjacency
?get.adjacency
get.edgelist
?get.edgelist
shiny::runApp('Study/2. Data Visualization/4.project/dataviz')
df <- read_csv("/Users/zhengjiexu/Desktop/Study/2.\ Data\ Visualization/4.project/dataviz/operations.csv")
df
df <- df %>% filter(is.na(Country) == FALSE & is.na(`Target Longitude`) == FALSE & is.na(`Takeoff Longitude`) == FALSE) %>%
filter(`Takeoff Latitude` != '4248', `Takeoff Longitude` != 1355) %>%
filter(`Target Longitude` > 0, `Takeoff Longitude` > 0, `Target Latitude` > 0, `Target Longitude` <=360) %>%
mutate(id=1:n())
df
df$`Mission Date` <- as.Date(anytime::anydate(df$`Mission Date`))
# df$year <- as.numeric(strftime(df$`Mission Date`, format = "%Y"))
# df$week <- as.numeric(strftime(df$`Mission Date`, format = "%V"))
df$start_week <- cut(df$`Mission Date`, "week")
df_takeoff <- df %>% st_as_sf(., coords = c("Takeoff Longitude", "Takeoff Latitude"))
df_target <- df %>% st_as_sf(., coords = c("Target Longitude", "Target Latitude"))
df_target
library(tidyverse)
setwd('/Users/zhengjiexu/Desktop/Study/2.\ Data\ Visualization/4.project/dataviz/')
getwd()
df <- read_csv("/Users/zhengjiexu/Desktop/Study/2.\ Data\ Visualization/4.project/dataviz/operations.csv")
df <- read_csv("/Users/zhengjiexu/Desktop/Study/2.\ Data\ Visualization/4.project/dataviz/operations.csv")
df <- read_csv("/Users/zhengjiexu/Desktop/Study/2.\ Data\ Visualization/4.project/dataviz/operations.csv")
df <- read_csv("/Users/zhengjiexu/Desktop/Study/2.\ Data\ Visualization/4.project/dataviz/operations.csv")
df
colnames(df)
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
summarise('ct'= n())
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n())
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n()) %>%
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n())
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n()) %>%
arrange(desc(ct))
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n()) %>%
arrange(desc(ct)) %>%
top_n(15, cy)
df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n()) %>%
arrange(desc(ct)) %>%
top_n(15, ct)
aircraft <- df %>% select(`Aircraft Series`) %>%
filter(is.na(`Aircraft Series`)==F) %>%
group_by(`Aircraft Series`) %>%
summarise('ct' = n()) %>%
arrange(desc(ct)) %>%
top_n(15, ct)
aircraft
library(plotly)
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(Animals, SF_Zoo, LA_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
p_aircraft <- aircraft %>% plot_ly(x=~`Aircraft Series`, y=~ct,
type='bar', name=None) %>%
layoyt(yaxis=list(title='Count'))
p_aircraft <- aircraft %>% plot_ly(x=~`Aircraft Series`, y=~ct,
type='bar', name="") %>%
layoyt(yaxis=list(title='Count'))
p_aircraft <- aircraft %>% plot_ly(x=~`Aircraft Series`, y=~ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft
aircraft
as.data.frame(aircraft)
p_aircraft <- aircraft %>% plot_ly(x=`Aircraft Series`, y=ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft <- plot_ly(data=as.data.frame(aircraft), x=`Aircraft Series`, y=ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft <- plot_ly(data=as.data.frame(aircraft), x=~`Aircraft Series`, y=ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft <- plot_ly(data=as.data.frame(aircraft), x=~`Aircraft Series`, y=~ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft
p_aircraft <- aircraft %>% plot_ly(x=`Aircraft Series`, y=ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft <- aircraft %>% plot_ly(x=~`Aircraft Series`, y=~ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'))
p_aircraft
Animals <- aircraft$`Aircraft Series`
SF_Zoo <- aircraft$ct
data <- data.frame(Animals, SF_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo')
layout(yaxis = list(title = 'Count'))
Animals <- aircraft$`Aircraft Series`
SF_Zoo <- aircraft$ct
data <- data.frame(Animals, SF_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
layout(yaxis = list(title = 'Count'))
p
xform <- list(categoryorder = "array",
categoryarray = aircraft$`Aircraft Series`)
p_aircraft <- aircraft %>% plot_ly(x=~`Aircraft Series`, y=~ct,
type='bar', name="") %>%
layout(yaxis=list(title='Count'), xaxis=xform)
p_aircraft
xform <- list(categoryorder = "array",
categoryarray = aircraft$`Aircraft Series`)
p_aircraft <- aircraft %>% plot_ly(x=~`Aircraft Series`, y=~ct,
type='bar', name="") %>%
layout(title='The moset commmon aricraft',
yaxis=list(title='Count'), xaxis=xform)
p_aircraft
attack <-  df %>% select(Country) %>%
filter(is.na(Country) == F) %>%
group_by(Country) %>%
summarise('ct' = n()) %>%
arrange(desc(ct))
attack
xform_attack <- list(categoryorder = "array",
categoryarray = attack$Country)
p_attack <- attack %>% plot_ly(x=~`Country`, y=~ct,
type='bar', name="") %>%
layout(title='Attacking Country',
yaxis=list(title='Count'), xaxis=xform)
p_attack
target <-  df %>% select(`Target Country`) %>%
filter(is.na(`Target Country`) == F) %>%
group_by(`Target Country`) %>%
summarise('ct' = n()) %>%
arrange(desc(ct)) %>%
top_n(15, ct)
target
xform_attack <- list(categoryorder = "array",
categoryarray = attack$Country)
p_attack <- attack %>% plot_ly(x=~`Country`, y=~ct,
type='bar', name="") %>%
layout(title='Attacking Country',
yaxis=list(title='Count'), xaxis=xform_attack)
p_attack
xform_tar <- list(categoryorder = "array",
categoryarray = target$`Target Country`)
p_tar <- target %>% plot_ly(x=~`Target Country`, y=~ct,
type='bar', name="") %>%
layout(title='Target Country',
yaxis=list(title='Count'), xaxis=xform_tar)
p_tar
Mission = df %>% select(`Mission Date`, `Mission ID`) %>%
filter(is.na(`Mission Date`) == F)
Mission$`Mission Date` <- as.Date(anytime::anydate(Mission$`Mission Date`))
Mission$start_month <- cut(Mission$`Mission Date`, "month")
Mission
Mission <- Mission %>% arrange(`Mission Date`)
Mission
Mission %>% group_by(start_month) %>%
summarise('ct' = n())
monthly_ct <- Mission %>% group_by(start_month) %>%
summarise('ct' = n())
monthly_ct
library(tidyverse)
library(plotly)
aircraft
p_aircraft
attack
p_attack
target
p_tar
monthly_ct
xform_tar <- list(categoryorder = "array",
categoryarray = target$`Target Country`)
p_tar <- target %>% plot_ly(x=~`Target Country`, y=~ct,
type='line', name="") %>%
layout(title='Target Country',
yaxis=list(title='Count'), xaxis=xform_tar)
p_tar
xform_tar <- list(categoryorder = "array",
categoryarray = target$`Target Country`)
p_tar <- target %>% plot_ly(x=~`Target Country`, y=~ct,
type='line', name="") %>%
layout(title='Target Country',
yaxis=list(title='Count'))
p_tar
p <- monthly_Ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines')
p <- monthly_ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines')
p
montly_ct
monthly_ct
as_Date(monthly_ct$start_month)
as.Date(monthly_ct$start_month)
monthly_ct$start_month
p <- monthly_ct %>% plot_ly(x = as.Date(monthly_ct$start_month), y = ~ct, type = 'scatter', mode = 'lines')
p
cut(Mission$`Mission Date`, "month") %>% as.Date()
Mission = df %>% select(`Mission Date`, `Mission ID`) %>%
filter(is.na(`Mission Date`) == F) %>%
Mission$`Mission Date` <- as.Date(anytime::anydate(Mission$`Mission Date`))
Mission = df %>% select(`Mission Date`, `Mission ID`) %>%
filter(is.na(`Mission Date`) == F) %>%
Mission$`Mission Date` <- as.Date(anytime::anydate(Mission$`Mission Date`))
Mission = df %>% select(`Mission Date`, `Mission ID`) %>%
filter(is.na(`Mission Date`) == F) %>%
Mission$`Mission Date` <- as.Date(anytime::anydate(Mission$`Mission Date`))
Mission <-  df %>% select(`Mission Date`, `Mission ID`) %>%
filter(is.na(`Mission Date`) == F) %>%
Mission$`Mission Date` <- as.Date(anytime::anydate(Mission$`Mission Date`))
Mission <-  df %>% select(`Mission Date`, `Mission ID`) %>%
filter(is.na(`Mission Date`) == F)
Mission$`Mission Date` <- as.Date(anytime::anydate(Mission$`Mission Date`))
Mission$start_month <- cut(Mission$`Mission Date`, "month")
Mission$start_month = as.Date(Mission$start_month)
Mission <- Mission %>% arrange(`Mission Date`)
monthly_ct <- Mission %>% group_by(start_month) %>%
summarise('ct' = n())
monthly_ct
p <- monthly_ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines')
p
p <- monthly_ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines') %>%
layout(title='Monthly count of bomb mission')
p
p <- monthly_ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines') %>%
layout(title='Monthly count of bomb mission',
yaxis=list(title='Count'))
p
p <- monthly_ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines') %>%
layout(title='Monthly count of bomb mission',
yaxis=list(title='Count'),
xaxis=list(title='Year'))
p
p <- monthly_ct %>% plot_ly(x = ~start_month, y = ~ct, type = 'scatter', mode = 'lines') %>%
layout(title='Monthly count of bomb mission',
yaxis=list(title='Count'),
xaxis=list(title=''))
p
runApp()
shiny::runApp()
runApp()
runApp()
